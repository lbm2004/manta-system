function [methodinfo,structs,enuminfo,ThunkLibName]=NIDAQmx64
% NIDAQMX64 Create structures to define interfaces found in 'NIDAQmx'.
% REDUCED SET OF FUNCTION CALLS SUFFICENT FOR MANTA! (DECREASES LOADING TIME)
% This function was generated by loadlibrary.m parser version 1.1.6.36 on Tue Nov 26 19:14:45 2013
% perl options:'NIDAQmx.i -outfile=NIDAQmx64.m -thunkfile=nicaiu_thunk_pcwin64.c -header=NIDAQmx.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'nicaiu_thunk_pcwin64');

%% DEVICE MANAGEMENT
% int32 __stdcall DAQmxResetDevice ( const char deviceName []); 
fcns.thunkname{fcnNum}='longcstringThunk';fcns.name{fcnNum}='DAQmxResetDevice'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int32 __stdcall DAQmxGetDevProductType ( const char device [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetDevProductType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevProductNum ( const char device [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevProductNum'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevSerialNum ( const char device [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevSerialNum'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevProductCategory ( const char device [], int32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevProductCategory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAIPhysicalChans ( const char device [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetDevAIPhysicalChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAIMaxSingleChanRate ( const char device [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevAIMaxSingleChanRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAIMaxMultiChanRate ( const char device [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevAIMaxMultiChanRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAIMinRate ( const char device [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevAIMinRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevBusType ( const char device [], int32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevBusType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevPCIBusNum ( const char device [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevPCIBusNum'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevPCIDevNum ( const char device [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevPCIDevNum'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevPXIChassisNum ( const char device [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevPXIChassisNum'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevPXISlotNum ( const char device [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevPXISlotNum'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;

%% TASK MANAGEMENT
% int32 __stdcall DAQmxLoadTask ( const char taskName [], TaskHandle * taskHandle ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxLoadTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'voidPtrPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateTask ( const char taskName [], TaskHandle * taskHandle ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxCreateTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'voidPtrPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxStartTask ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='DAQmxStartTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxStopTask ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='DAQmxStopTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxClearTask ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='DAQmxClearTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWaitUntilTaskDone ( TaskHandle taskHandle , float64 timeToWait ); 
fcns.thunkname{fcnNum}='longvoidPtrdoubleThunk';fcns.name{fcnNum}='DAQmxWaitUntilTaskDone'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxIsTaskDone ( TaskHandle taskHandle , bool32 * isTaskDone ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxIsTaskDone'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxTaskControl ( TaskHandle taskHandle , int32 action ); 
fcns.thunkname{fcnNum}='longvoidPtrlongThunk';fcns.name{fcnNum}='DAQmxTaskControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetTaskComplete ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetTaskComplete'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampTimingEngine ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSampTimingEngine'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSampTimingEngine ( TaskHandle taskHandle , uInt32 data ); 
fcns.thunkname{fcnNum}='longvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxSetSampTimingEngine'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSampTimingEngine ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='DAQmxResetSampTimingEngine'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;

%% TASK PROPERTIES
% int32 __stdcall DAQmxGetSampClkRate ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSampClkRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSampClkRate ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longvoidPtrdoubleThunk';fcns.name{fcnNum}='DAQmxSetSampClkRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSampClkRate ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='DAQmxResetSampClkRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetTaskChannels ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringulongThunk';fcns.name{fcnNum}='DAQmxGetTaskChannels'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetTaskNumChans ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetTaskNumChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'ulongPtr'};fcnNum=fcnNum+1;

%% CHANNEL MANAGEMENT
% int32 __stdcall DAQmxAddGlobalChansToTask ( TaskHandle taskHandle , const char channelNames []); 
fcns.thunkname{fcnNum}='longvoidPtrcstringThunk';fcns.name{fcnNum}='DAQmxAddGlobalChansToTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIVoltageChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , const char customScaleName []); 
fcns.thunkname{fcnNum}='longvoidPtrcstringcstringlongdoubledoublelongcstringThunk';fcns.name{fcnNum}='DAQmxCreateAIVoltageChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAOVoltageChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , const char customScaleName []); 
fcns.thunkname{fcnNum}='longvoidPtrcstringcstringdoubledoublelongcstringThunk';fcns.name{fcnNum}='DAQmxCreateAOVoltageChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'cstring', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAIVoltageRngs ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevAIVoltageRngs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAIMaxSingleChanRate ( const char device [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevAIMaxSingleChanRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAIMaxMultiChanRate ( const char device [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevAIMaxMultiChanRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAIPhysicalChans ( const char device [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetDevAIPhysicalChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateDIChan ( TaskHandle taskHandle , const char lines [], const char nameToAssignToLines [], int32 lineGrouping ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringcstringlongThunk';fcns.name{fcnNum}='DAQmxCreateDIChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateDOChan ( TaskHandle taskHandle , const char lines [], const char nameToAssignToLines [], int32 lineGrouping ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringcstringlongThunk';fcns.name{fcnNum}='DAQmxCreateDOChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'cstring', 'long'};fcnNum=fcnNum+1;

%% CHANNEL PROPERTIES
% int32 __stdcall DAQmxGetAIMax ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIMax ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIMax ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longvoidPtrcstringThunk';fcns.name{fcnNum}='DAQmxResetAIMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIMin ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIMin ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIMin ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longvoidPtrcstringThunk';fcns.name{fcnNum}='DAQmxResetAIMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% TERM_CONFIGS
% int32 __stdcall DAQmxGetAITermCfg ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAITermCfg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAITermCfg ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringlongThunk';fcns.name{fcnNum}='DAQmxSetAITermCfg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAITermCfg ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longvoidPtrcstringThunk';fcns.name{fcnNum}='DAQmxResetAITermCfg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOTermCfg ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOTermCfg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOTermCfg ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringlongThunk';fcns.name{fcnNum}='DAQmxSetAOTermCfg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOTermCfg ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longvoidPtrcstringThunk';fcns.name{fcnNum}='DAQmxResetAOTermCfg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;


%% DATA ACQUISITION / PRODUCTION 
% IN
% int32 __stdcall DAQmxGetReadAvailSampPerChan ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetReadAvailSampPerChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadTotalSampPerChanAcquired ( TaskHandle taskHandle , uInt64 * data ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetReadTotalSampPerChanAcquired'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint64Ptr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadAnalogF64 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , float64 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longvoidPtrlongdoubleulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadAnalogF64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'double', 'ulong', 'doublePtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadAnalogScalarF64 ( TaskHandle taskHandle , float64 timeout , float64 * value , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longvoidPtrdoublevoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadAnalogScalarF64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'double', 'doublePtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadBinaryI16 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , int16 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longvoidPtrlongdoubleulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadBinaryI16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'double', 'ulong', 'int16Ptr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadBinaryU16 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , uInt16 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longvoidPtrlongdoubleulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadBinaryU16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'double', 'ulong', 'uint16Ptr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadBinaryI32 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , int32 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longvoidPtrlongdoubleulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadBinaryI32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'double', 'ulong', 'longPtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadBinaryU32 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , uInt32 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longvoidPtrlongdoubleulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadBinaryU32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'double', 'ulong', 'ulongPtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadDigitalU8 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , uInt8 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longvoidPtrlongdoubleulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadDigitalU8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'double', 'ulong', 'uint8Ptr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadDigitalU16 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , uInt16 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longvoidPtrlongdoubleulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadDigitalU16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'double', 'ulong', 'uint16Ptr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadDigitalU32 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , uInt32 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longvoidPtrlongdoubleulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadDigitalU32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'double', 'ulong', 'ulongPtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadDigitalScalarU32 ( TaskHandle taskHandle , float64 timeout , uInt32 * value , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longvoidPtrdoublevoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadDigitalScalarU32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'double', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadDigitalLines ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , uInt8 readArray [], uInt32 arraySizeInBytes , int32 * sampsPerChanRead , int32 * numBytesPerSamp , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longvoidPtrlongdoubleulongvoidPtrulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadDigitalLines'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'double', 'ulong', 'uint8Ptr', 'ulong', 'longPtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% OUT
% int32 __stdcall DAQmxWriteAnalogF64 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const float64 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longvoidPtrlongulongdoubleulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteAnalogF64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'ulong', 'double', 'ulong', 'doublePtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteAnalogScalarF64 ( TaskHandle taskHandle , bool32 autoStart , float64 timeout , float64 value , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longvoidPtrulongdoubledoublevoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteAnalogScalarF64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'double', 'double', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteBinaryI16 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const int16 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longvoidPtrlongulongdoubleulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteBinaryI16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'ulong', 'double', 'ulong', 'int16Ptr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteBinaryU16 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const uInt16 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longvoidPtrlongulongdoubleulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteBinaryU16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'ulong', 'double', 'ulong', 'uint16Ptr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteBinaryI32 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const int32 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longvoidPtrlongulongdoubleulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteBinaryI32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'ulong', 'double', 'ulong', 'longPtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteBinaryU32 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const uInt32 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longvoidPtrlongulongdoubleulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteBinaryU32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'ulong', 'double', 'ulong', 'ulongPtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteDigitalU8 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const uInt8 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longvoidPtrlongulongdoubleulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteDigitalU8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'ulong', 'double', 'ulong', 'uint8Ptr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteDigitalU16 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const uInt16 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longvoidPtrlongulongdoubleulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteDigitalU16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'ulong', 'double', 'ulong', 'uint16Ptr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteDigitalU32 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const uInt32 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longvoidPtrlongulongdoubleulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteDigitalU32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'ulong', 'double', 'ulong', 'ulongPtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteDigitalScalarU32 ( TaskHandle taskHandle , bool32 autoStart , float64 timeout , uInt32 value , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longvoidPtrulongdoubleulongvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteDigitalScalarU32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'double', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteDigitalLines ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const uInt8 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longvoidPtrlongulongdoubleulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteDigitalLines'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'ulong', 'double', 'ulong', 'uint8Ptr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;

%% TRIGGERS
% int32 __stdcall DAQmxSendSoftwareTrigger ( TaskHandle taskHandle , int32 triggerID ); 
fcns.thunkname{fcnNum}='longvoidPtrlongThunk';fcns.name{fcnNum}='DAQmxSendSoftwareTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgSampClkTiming ( TaskHandle taskHandle , const char source [], float64 rate , int32 activeEdge , int32 sampleMode , uInt64 sampsPerChan ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringdoublelonglonguint64Thunk';fcns.name{fcnNum}='DAQmxCfgSampClkTiming'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'double', 'long', 'long', 'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgDigEdgeStartTrig ( TaskHandle taskHandle , const char triggerSource [], int32 triggerEdge ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringlongThunk';fcns.name{fcnNum}='DAQmxCfgDigEdgeStartTrig'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgAnlgEdgeStartTrig ( TaskHandle taskHandle , const char triggerSource [], int32 triggerSlope , float64 triggerLevel ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringlongdoubleThunk';fcns.name{fcnNum}='DAQmxCfgAnlgEdgeStartTrig'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'long', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetStartTrigType ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetStartTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetStartTrigType ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longvoidPtrlongThunk';fcns.name{fcnNum}='DAQmxSetStartTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetStartTrigType ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='DAQmxResetStartTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgEdgeStartTrigLvl ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgEdgeStartTrigLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgEdgeStartTrigLvl ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longvoidPtrdoubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgEdgeStartTrigLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgEdgeStartTrigLvl ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='DAQmxResetAnlgEdgeStartTrigLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgEdgeStartTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringulongThunk';fcns.name{fcnNum}='DAQmxGetAnlgEdgeStartTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgEdgeStartTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringThunk';fcns.name{fcnNum}='DAQmxSetAnlgEdgeStartTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgEdgeStartTrigSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='DAQmxResetAnlgEdgeStartTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;

%% EXCITATION CURRENT ON ANALOG INS
% int32 __stdcall DAQmxGetAIExcitSrc ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIExcitSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIExcitSrc ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIExcitSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIExcitSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longvoidPtrcstringThunk';fcns.name{fcnNum}='DAQmxResetAIExcitSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIExcitVal ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIExcitVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIExcitVal ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIExcitVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIExcitVal ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longvoidPtrcstringThunk';fcns.name{fcnNum}='DAQmxResetAIExcitVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIExcitUseForScaling ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIExcitUseForScaling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIExcitUseForScaling ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIExcitUseForScaling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIExcitUseForScaling ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longvoidPtrcstringThunk';fcns.name{fcnNum}='DAQmxResetAIExcitUseForScaling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIExcitUseMultiplexed ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIExcitUseMultiplexed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIExcitUseMultiplexed ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIExcitUseMultiplexed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIExcitUseMultiplexed ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longvoidPtrcstringThunk';fcns.name{fcnNum}='DAQmxResetAIExcitUseMultiplexed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIExcitActualVal ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIExcitActualVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIExcitActualVal ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIExcitActualVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIExcitActualVal ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longvoidPtrcstringThunk';fcns.name{fcnNum}='DAQmxResetAIExcitActualVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIExcitDCorAC ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIExcitDCorAC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIExcitDCorAC ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIExcitDCorAC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIExcitDCorAC ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longvoidPtrcstringThunk';fcns.name{fcnNum}='DAQmxResetAIExcitDCorAC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIExcitVoltageOrCurrent ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIExcitVoltageOrCurrent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIExcitVoltageOrCurrent ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIExcitVoltageOrCurrent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIExcitVoltageOrCurrent ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longvoidPtrcstringThunk';fcns.name{fcnNum}='DAQmxResetAIExcitVoltageOrCurrent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;

%% MICROPHONE CHANNEL
% int32 __stdcall DAQmxCreateAIVoltageChanWithExcit ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , bool32 useExcitForScaling , const char customScaleName []); 
fcns.thunkname{fcnNum}='longvoidPtrcstringcstringlongdoubledoublelonglonglongdoubleulongcstringThunk';fcns.name{fcnNum}='DAQmxCreateAIVoltageChanWithExcit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'long', 'long', 'double', 'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIMicrophoneChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , int32 units , float64 micSensitivity , float64 maxSndPressLevel , int32 currentExcitSource , float64 currentExcitVal , const char customScaleName []); 
fcns.thunkname{fcnNum}='longvoidPtrcstringcstringlonglongdoubledoublelongdoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateAIMicrophoneChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'cstring', 'long', 'long', 'double', 'double', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateLinScale ( const char name [], float64 slope , float64 yIntercept , int32 preScaledUnits , const char scaledUnits []); 
fcns.thunkname{fcnNum}='longcstringdoubledoublelongcstringThunk';fcns.name{fcnNum}='DAQmxCreateLinScale'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateMapScale ( const char name [], float64 prescaledMin , float64 prescaledMax , float64 scaledMin , float64 scaledMax , int32 preScaledUnits , const char scaledUnits []); 
fcns.thunkname{fcnNum}='longcstringdoubledoubledoubledoublelongcstringThunk';fcns.name{fcnNum}='DAQmxCreateMapScale'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'double', 'double', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgInputBuffer ( TaskHandle taskHandle , uInt32 numSampsPerChan ); 
fcns.thunkname{fcnNum}='longvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxCfgInputBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgOutputBuffer ( TaskHandle taskHandle , uInt32 numSampsPerChan ); 
fcns.thunkname{fcnNum}='longvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxCfgOutputBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;

methodinfo=fcns;